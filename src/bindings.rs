#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(improper_ctypes)]
#![allow(deref_nullptr)]
/* automatically generated by rust-bindgen */
// File generated by cholmod.h

pub const _FILE_OFFSET_BITS: u32 = 64;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_FILE_OFFSET64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const SuiteSparse_long_idd: &'static [u8; 3usize] = b"ld\0";
pub const SuiteSparse_long_id: &'static [u8; 4usize] = b"%ld\0";
pub const SUITESPARSE_DATE: &'static [u8; 13usize] = b"Feb 20, 2020\0";
pub const SUITESPARSE_MAIN_VERSION: u32 = 5;
pub const SUITESPARSE_SUB_VERSION: u32 = 7;
pub const SUITESPARSE_SUBSUB_VERSION: u32 = 1;
pub const CHOLMOD_DATE: &'static [u8; 13usize] = b"Oct 22, 2019\0";
pub const CHOLMOD_MAIN_VERSION: u32 = 3;
pub const CHOLMOD_SUB_VERSION: u32 = 0;
pub const CHOLMOD_SUBSUB_VERSION: u32 = 14;
pub const CHOLMOD_OMP_NUM_THREADS: u32 = 4;
pub const CHOLMOD_DEVICE_SUPERNODE_BUFFERS: u32 = 6;
pub const CHOLMOD_HOST_SUPERNODE_BUFFERS: u32 = 8;
pub const CHOLMOD_DEVICE_STREAMS: u32 = 2;
pub const CHOLMOD_COMMON: u32 = 0;
pub const CHOLMOD_SPARSE: u32 = 1;
pub const CHOLMOD_FACTOR: u32 = 2;
pub const CHOLMOD_DENSE: u32 = 3;
pub const CHOLMOD_TRIPLET: u32 = 4;
pub const CHOLMOD_INT: u32 = 0;
pub const CHOLMOD_INTLONG: u32 = 1;
pub const CHOLMOD_LONG: u32 = 2;
pub const CHOLMOD_DOUBLE: u32 = 0;
pub const CHOLMOD_SINGLE: u32 = 1;
pub const CHOLMOD_PATTERN: u32 = 0;
pub const CHOLMOD_REAL: u32 = 1;
pub const CHOLMOD_COMPLEX: u32 = 2;
pub const CHOLMOD_ZOMPLEX: u32 = 3;
pub const CHOLMOD_MAXMETHODS: u32 = 9;
pub const CHOLMOD_OK: u32 = 0;
pub const CHOLMOD_NOT_INSTALLED: i32 = -1;
pub const CHOLMOD_OUT_OF_MEMORY: i32 = -2;
pub const CHOLMOD_TOO_LARGE: i32 = -3;
pub const CHOLMOD_INVALID: i32 = -4;
pub const CHOLMOD_GPU_PROBLEM: i32 = -5;
pub const CHOLMOD_NOT_POSDEF: u32 = 1;
pub const CHOLMOD_DSMALL: u32 = 2;
pub const CHOLMOD_NATURAL: u32 = 0;
pub const CHOLMOD_GIVEN: u32 = 1;
pub const CHOLMOD_AMD: u32 = 2;
pub const CHOLMOD_METIS: u32 = 3;
pub const CHOLMOD_NESDIS: u32 = 4;
pub const CHOLMOD_COLAMD: u32 = 5;
pub const CHOLMOD_POSTORDERED: u32 = 6;
pub const CHOLMOD_SIMPLICIAL: u32 = 0;
pub const CHOLMOD_AUTO: u32 = 1;
pub const CHOLMOD_SUPERNODAL: u32 = 2;
pub const CHOLMOD_ANALYZE_FOR_SPQR: u32 = 0;
pub const CHOLMOD_ANALYZE_FOR_CHOLESKY: u32 = 1;
pub const CHOLMOD_ANALYZE_FOR_SPQRGPU: u32 = 2;
pub const CHOLMOD_MM_RECTANGULAR: u32 = 1;
pub const CHOLMOD_MM_UNSYMMETRIC: u32 = 2;
pub const CHOLMOD_MM_SYMMETRIC: u32 = 3;
pub const CHOLMOD_MM_HERMITIAN: u32 = 4;
pub const CHOLMOD_MM_SKEW_SYMMETRIC: u32 = 5;
pub const CHOLMOD_MM_SYMMETRIC_POSDIAG: u32 = 6;
pub const CHOLMOD_MM_HERMITIAN_POSDIAG: u32 = 7;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const CHOLMOD_A: u32 = 0;
pub const CHOLMOD_LDLt: u32 = 1;
pub const CHOLMOD_LD: u32 = 2;
pub const CHOLMOD_DLt: u32 = 3;
pub const CHOLMOD_L: u32 = 4;
pub const CHOLMOD_Lt: u32 = 5;
pub const CHOLMOD_D: u32 = 6;
pub const CHOLMOD_P: u32 = 7;
pub const CHOLMOD_Pt: u32 = 8;
pub const CHOLMOD_SCALAR: u32 = 0;
pub const CHOLMOD_ROW: u32 = 1;
pub const CHOLMOD_COL: u32 = 2;
pub const CHOLMOD_SYM: u32 = 3;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino64_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off64_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt64_t;
pub type fsblkcnt_t = __fsblkcnt64_t;
pub type fsfilcnt_t = __fsfilcnt64_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}mkstemp64"]
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}mkstemps64"]
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SuiteSparse_config_struct {
    pub malloc_func:
        ::std::option::Option<unsafe extern "C" fn(arg1: size_t) -> *mut ::std::os::raw::c_void>,
    pub calloc_func: ::std::option::Option<
        unsafe extern "C" fn(arg1: size_t, arg2: size_t) -> *mut ::std::os::raw::c_void,
    >,
    pub realloc_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub printf_func: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
    >,
    pub hypot_func: ::std::option::Option<unsafe extern "C" fn(arg1: f64, arg2: f64) -> f64>,
    pub divcomplex_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: f64,
            arg2: f64,
            arg3: f64,
            arg4: f64,
            arg5: *mut f64,
            arg6: *mut f64,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_SuiteSparse_config_struct() {
    assert_eq!(
        ::std::mem::size_of::<SuiteSparse_config_struct>(),
        56usize,
        concat!("Size of: ", stringify!(SuiteSparse_config_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<SuiteSparse_config_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(SuiteSparse_config_struct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SuiteSparse_config_struct>())).malloc_func as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SuiteSparse_config_struct),
            "::",
            stringify!(malloc_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SuiteSparse_config_struct>())).calloc_func as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SuiteSparse_config_struct),
            "::",
            stringify!(calloc_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SuiteSparse_config_struct>())).realloc_func as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SuiteSparse_config_struct),
            "::",
            stringify!(realloc_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SuiteSparse_config_struct>())).free_func as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SuiteSparse_config_struct),
            "::",
            stringify!(free_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SuiteSparse_config_struct>())).printf_func as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SuiteSparse_config_struct),
            "::",
            stringify!(printf_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SuiteSparse_config_struct>())).hypot_func as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SuiteSparse_config_struct),
            "::",
            stringify!(hypot_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SuiteSparse_config_struct>())).divcomplex_func as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SuiteSparse_config_struct),
            "::",
            stringify!(divcomplex_func)
        )
    );
}
extern "C" {
    pub static mut SuiteSparse_config: SuiteSparse_config_struct;
}
extern "C" {
    pub fn SuiteSparse_start();
}
extern "C" {
    pub fn SuiteSparse_finish();
}
extern "C" {
    pub fn SuiteSparse_malloc(nitems: size_t, size_of_item: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SuiteSparse_calloc(nitems: size_t, size_of_item: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SuiteSparse_realloc(
        nitems_new: size_t,
        nitems_old: size_t,
        size_of_item: size_t,
        p: *mut ::std::os::raw::c_void,
        ok: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SuiteSparse_free(p: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SuiteSparse_tic(tic: *mut f64);
}
extern "C" {
    pub fn SuiteSparse_toc(tic: *mut f64) -> f64;
}
extern "C" {
    pub fn SuiteSparse_time() -> f64;
}
extern "C" {
    pub fn SuiteSparse_hypot(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn SuiteSparse_divcomplex(
        ar: f64,
        ai: f64,
        br: f64,
        bi: f64,
        cr: *mut f64,
        ci: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SuiteSparse_version(version: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cholmod_common_struct {
    pub dbound: f64,
    pub grow0: f64,
    pub grow1: f64,
    pub grow2: size_t,
    pub maxrank: size_t,
    pub supernodal_switch: f64,
    pub supernodal: ::std::os::raw::c_int,
    pub final_asis: ::std::os::raw::c_int,
    pub final_super: ::std::os::raw::c_int,
    pub final_ll: ::std::os::raw::c_int,
    pub final_pack: ::std::os::raw::c_int,
    pub final_monotonic: ::std::os::raw::c_int,
    pub final_resymbol: ::std::os::raw::c_int,
    pub zrelax: [f64; 3usize],
    pub nrelax: [size_t; 3usize],
    pub prefer_zomplex: ::std::os::raw::c_int,
    pub prefer_upper: ::std::os::raw::c_int,
    pub quick_return_if_not_posdef: ::std::os::raw::c_int,
    pub prefer_binary: ::std::os::raw::c_int,
    pub print: ::std::os::raw::c_int,
    pub precise: ::std::os::raw::c_int,
    pub try_catch: ::std::os::raw::c_int,
    pub error_handler: ::std::option::Option<
        unsafe extern "C" fn(
            status: ::std::os::raw::c_int,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
            message: *const ::std::os::raw::c_char,
        ),
    >,
    pub nmethods: ::std::os::raw::c_int,
    pub current: ::std::os::raw::c_int,
    pub selected: ::std::os::raw::c_int,
    pub method: [cholmod_common_struct_cholmod_method_struct; 10usize],
    pub postorder: ::std::os::raw::c_int,
    pub default_nesdis: ::std::os::raw::c_int,
    pub metis_memory: f64,
    pub metis_dswitch: f64,
    pub metis_nswitch: size_t,
    pub nrow: size_t,
    pub mark: ::std::os::raw::c_long,
    pub iworksize: size_t,
    pub xworksize: size_t,
    pub Flag: *mut ::std::os::raw::c_void,
    pub Head: *mut ::std::os::raw::c_void,
    pub Xwork: *mut ::std::os::raw::c_void,
    pub Iwork: *mut ::std::os::raw::c_void,
    pub itype: ::std::os::raw::c_int,
    pub dtype: ::std::os::raw::c_int,
    pub no_workspace_reallocate: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub fl: f64,
    pub lnz: f64,
    pub anz: f64,
    pub modfl: f64,
    pub malloc_count: size_t,
    pub memory_usage: size_t,
    pub memory_inuse: size_t,
    pub nrealloc_col: f64,
    pub nrealloc_factor: f64,
    pub ndbounds_hit: f64,
    pub rowfacfl: f64,
    pub aatfl: f64,
    pub called_nd: ::std::os::raw::c_int,
    pub blas_ok: ::std::os::raw::c_int,
    pub SPQR_grain: f64,
    pub SPQR_small: f64,
    pub SPQR_shrink: ::std::os::raw::c_int,
    pub SPQR_nthreads: ::std::os::raw::c_int,
    pub SPQR_flopcount: f64,
    pub SPQR_analyze_time: f64,
    pub SPQR_factorize_time: f64,
    pub SPQR_solve_time: f64,
    pub SPQR_flopcount_bound: f64,
    pub SPQR_tol_used: f64,
    pub SPQR_norm_E_fro: f64,
    pub SPQR_istat: [::std::os::raw::c_long; 10usize],
    pub useGPU: ::std::os::raw::c_int,
    pub maxGpuMemBytes: size_t,
    pub maxGpuMemFraction: f64,
    pub gpuMemorySize: size_t,
    pub gpuKernelTime: f64,
    pub gpuFlops: ::std::os::raw::c_long,
    pub gpuNumKernelLaunches: ::std::os::raw::c_int,
    pub cublasHandle: *mut ::std::os::raw::c_void,
    pub gpuStream: [*mut ::std::os::raw::c_void; 8usize],
    pub cublasEventPotrf: [*mut ::std::os::raw::c_void; 3usize],
    pub updateCKernelsComplete: *mut ::std::os::raw::c_void,
    pub updateCBuffersFree: [*mut ::std::os::raw::c_void; 8usize],
    pub dev_mempool: *mut ::std::os::raw::c_void,
    pub dev_mempool_size: size_t,
    pub host_pinned_mempool: *mut ::std::os::raw::c_void,
    pub host_pinned_mempool_size: size_t,
    pub devBuffSize: size_t,
    pub ibuffer: ::std::os::raw::c_int,
    pub syrkStart: f64,
    pub cholmod_cpu_gemm_time: f64,
    pub cholmod_cpu_syrk_time: f64,
    pub cholmod_cpu_trsm_time: f64,
    pub cholmod_cpu_potrf_time: f64,
    pub cholmod_gpu_gemm_time: f64,
    pub cholmod_gpu_syrk_time: f64,
    pub cholmod_gpu_trsm_time: f64,
    pub cholmod_gpu_potrf_time: f64,
    pub cholmod_assemble_time: f64,
    pub cholmod_assemble_time2: f64,
    pub cholmod_cpu_gemm_calls: size_t,
    pub cholmod_cpu_syrk_calls: size_t,
    pub cholmod_cpu_trsm_calls: size_t,
    pub cholmod_cpu_potrf_calls: size_t,
    pub cholmod_gpu_gemm_calls: size_t,
    pub cholmod_gpu_syrk_calls: size_t,
    pub cholmod_gpu_trsm_calls: size_t,
    pub cholmod_gpu_potrf_calls: size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cholmod_common_struct_cholmod_method_struct {
    pub lnz: f64,
    pub fl: f64,
    pub prune_dense: f64,
    pub prune_dense2: f64,
    pub nd_oksep: f64,
    pub other_1: [f64; 4usize],
    pub nd_small: size_t,
    pub other_2: [size_t; 4usize],
    pub aggressive: ::std::os::raw::c_int,
    pub order_for_lu: ::std::os::raw::c_int,
    pub nd_compress: ::std::os::raw::c_int,
    pub nd_camd: ::std::os::raw::c_int,
    pub nd_components: ::std::os::raw::c_int,
    pub ordering: ::std::os::raw::c_int,
    pub other_3: [size_t; 4usize],
}
#[test]
fn bindgen_test_layout_cholmod_common_struct_cholmod_method_struct() {
    assert_eq!(
        ::std::mem::size_of::<cholmod_common_struct_cholmod_method_struct>(),
        168usize,
        concat!(
            "Size of: ",
            stringify!(cholmod_common_struct_cholmod_method_struct)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cholmod_common_struct_cholmod_method_struct>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cholmod_common_struct_cholmod_method_struct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).lnz as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(lnz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).fl as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(fl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).prune_dense
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(prune_dense)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).prune_dense2
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(prune_dense2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).nd_oksep
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(nd_oksep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).other_1
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(other_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).nd_small
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(nd_small)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).other_2
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(other_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).aggressive
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(aggressive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).order_for_lu
                as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(order_for_lu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).nd_compress
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(nd_compress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).nd_camd
                as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(nd_camd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).nd_components
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(nd_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).ordering
                as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(ordering)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct_cholmod_method_struct>())).other_3
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct_cholmod_method_struct),
            "::",
            stringify!(other_3)
        )
    );
}
#[test]
fn bindgen_test_layout_cholmod_common_struct() {
    assert_eq!(
        ::std::mem::size_of::<cholmod_common_struct>(),
        2664usize,
        concat!("Size of: ", stringify!(cholmod_common_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cholmod_common_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cholmod_common_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).dbound as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(dbound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).grow0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(grow0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).grow1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(grow1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).grow2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(grow2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).maxrank as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(maxrank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).supernodal_switch as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(supernodal_switch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).supernodal as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(supernodal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).final_asis as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(final_asis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).final_super as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(final_super)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).final_ll as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(final_ll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).final_pack as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(final_pack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).final_monotonic as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(final_monotonic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).final_resymbol as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(final_resymbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).zrelax as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(zrelax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).nrelax as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(nrelax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).prefer_zomplex as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(prefer_zomplex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).prefer_upper as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(prefer_upper)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).quick_return_if_not_posdef as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(quick_return_if_not_posdef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).prefer_binary as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(prefer_binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).print as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(print)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).precise as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(precise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).try_catch as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(try_catch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).error_handler as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(error_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).nmethods as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(nmethods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).current as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).selected as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(selected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).method as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).postorder as *const _ as usize },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(postorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).default_nesdis as *const _ as usize
        },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(default_nesdis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).metis_memory as *const _ as usize
        },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(metis_memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).metis_dswitch as *const _ as usize
        },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(metis_dswitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).metis_nswitch as *const _ as usize
        },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(metis_nswitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).nrow as *const _ as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(nrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).mark as *const _ as usize },
        1904usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).iworksize as *const _ as usize },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(iworksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).xworksize as *const _ as usize },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(xworksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).Flag as *const _ as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(Flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).Head as *const _ as usize },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).Xwork as *const _ as usize },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(Xwork)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).Iwork as *const _ as usize },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(Iwork)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).itype as *const _ as usize },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(itype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).dtype as *const _ as usize },
        1964usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(dtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).no_workspace_reallocate as *const _
                as usize
        },
        1968usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(no_workspace_reallocate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).status as *const _ as usize },
        1972usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).fl as *const _ as usize },
        1976usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(fl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).lnz as *const _ as usize },
        1984usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(lnz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).anz as *const _ as usize },
        1992usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(anz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).modfl as *const _ as usize },
        2000usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(modfl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).malloc_count as *const _ as usize
        },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(malloc_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).memory_usage as *const _ as usize
        },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(memory_usage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).memory_inuse as *const _ as usize
        },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(memory_inuse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).nrealloc_col as *const _ as usize
        },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(nrealloc_col)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).nrealloc_factor as *const _ as usize
        },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(nrealloc_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).ndbounds_hit as *const _ as usize
        },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(ndbounds_hit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).rowfacfl as *const _ as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(rowfacfl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).aatfl as *const _ as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(aatfl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).called_nd as *const _ as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(called_nd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).blas_ok as *const _ as usize },
        2076usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(blas_ok)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_grain as *const _ as usize
        },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_grain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_small as *const _ as usize
        },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_small)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_shrink as *const _ as usize
        },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_shrink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_nthreads as *const _ as usize
        },
        2100usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_nthreads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_flopcount as *const _ as usize
        },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_flopcount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_analyze_time as *const _ as usize
        },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_analyze_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_factorize_time as *const _
                as usize
        },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_factorize_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_solve_time as *const _ as usize
        },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_solve_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_flopcount_bound as *const _
                as usize
        },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_flopcount_bound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_tol_used as *const _ as usize
        },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_tol_used)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_norm_E_fro as *const _ as usize
        },
        2152usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_norm_E_fro)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).SPQR_istat as *const _ as usize
        },
        2160usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(SPQR_istat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).useGPU as *const _ as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(useGPU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).maxGpuMemBytes as *const _ as usize
        },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(maxGpuMemBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).maxGpuMemFraction as *const _ as usize
        },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(maxGpuMemFraction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).gpuMemorySize as *const _ as usize
        },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(gpuMemorySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).gpuKernelTime as *const _ as usize
        },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(gpuKernelTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).gpuFlops as *const _ as usize },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(gpuFlops)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).gpuNumKernelLaunches as *const _
                as usize
        },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(gpuNumKernelLaunches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cublasHandle as *const _ as usize
        },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cublasHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).gpuStream as *const _ as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(gpuStream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cublasEventPotrf as *const _ as usize
        },
        2368usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cublasEventPotrf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).updateCKernelsComplete as *const _
                as usize
        },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(updateCKernelsComplete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).updateCBuffersFree as *const _
                as usize
        },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(updateCBuffersFree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).dev_mempool as *const _ as usize
        },
        2464usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(dev_mempool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).dev_mempool_size as *const _ as usize
        },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(dev_mempool_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).host_pinned_mempool as *const _
                as usize
        },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(host_pinned_mempool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).host_pinned_mempool_size as *const _
                as usize
        },
        2488usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(host_pinned_mempool_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).devBuffSize as *const _ as usize
        },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(devBuffSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).ibuffer as *const _ as usize },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(ibuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_common_struct>())).syrkStart as *const _ as usize },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(syrkStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_cpu_gemm_time as *const _
                as usize
        },
        2520usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_cpu_gemm_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_cpu_syrk_time as *const _
                as usize
        },
        2528usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_cpu_syrk_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_cpu_trsm_time as *const _
                as usize
        },
        2536usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_cpu_trsm_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_cpu_potrf_time as *const _
                as usize
        },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_cpu_potrf_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_gpu_gemm_time as *const _
                as usize
        },
        2552usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_gpu_gemm_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_gpu_syrk_time as *const _
                as usize
        },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_gpu_syrk_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_gpu_trsm_time as *const _
                as usize
        },
        2568usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_gpu_trsm_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_gpu_potrf_time as *const _
                as usize
        },
        2576usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_gpu_potrf_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_assemble_time as *const _
                as usize
        },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_assemble_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_assemble_time2 as *const _
                as usize
        },
        2592usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_assemble_time2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_cpu_gemm_calls as *const _
                as usize
        },
        2600usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_cpu_gemm_calls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_cpu_syrk_calls as *const _
                as usize
        },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_cpu_syrk_calls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_cpu_trsm_calls as *const _
                as usize
        },
        2616usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_cpu_trsm_calls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_cpu_potrf_calls as *const _
                as usize
        },
        2624usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_cpu_potrf_calls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_gpu_gemm_calls as *const _
                as usize
        },
        2632usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_gpu_gemm_calls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_gpu_syrk_calls as *const _
                as usize
        },
        2640usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_gpu_syrk_calls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_gpu_trsm_calls as *const _
                as usize
        },
        2648usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_gpu_trsm_calls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_common_struct>())).cholmod_gpu_potrf_calls as *const _
                as usize
        },
        2656usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_common_struct),
            "::",
            stringify!(cholmod_gpu_potrf_calls)
        )
    );
}
pub type cholmod_common = cholmod_common_struct;
extern "C" {
    pub fn cholmod_start(Common: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_start(arg1: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_finish(Common: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_finish(arg1: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_defaults(Common: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_defaults(arg1: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_maxrank(n: size_t, Common: *mut cholmod_common) -> size_t;
}
extern "C" {
    pub fn cholmod_l_maxrank(arg1: size_t, arg2: *mut cholmod_common) -> size_t;
}
extern "C" {
    pub fn cholmod_allocate_work(
        nrow: size_t,
        iworksize: size_t,
        xworksize: size_t,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_allocate_work(
        arg1: size_t,
        arg2: size_t,
        arg3: size_t,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_free_work(Common: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_free_work(arg1: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_clear_flag(Common: *mut cholmod_common) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_l_clear_flag(arg1: *mut cholmod_common) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_error(
        status: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_error(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_dbound(dj: f64, Common: *mut cholmod_common) -> f64;
}
extern "C" {
    pub fn cholmod_l_dbound(arg1: f64, arg2: *mut cholmod_common) -> f64;
}
extern "C" {
    pub fn cholmod_hypot(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn cholmod_l_hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn cholmod_divcomplex(
        ar: f64,
        ai: f64,
        br: f64,
        bi: f64,
        cr: *mut f64,
        ci: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_divcomplex(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: *mut f64,
        arg6: *mut f64,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cholmod_sparse_struct {
    pub nrow: size_t,
    pub ncol: size_t,
    pub nzmax: size_t,
    pub p: *mut ::std::os::raw::c_void,
    pub i: *mut ::std::os::raw::c_void,
    pub nz: *mut ::std::os::raw::c_void,
    pub x: *mut ::std::os::raw::c_void,
    pub z: *mut ::std::os::raw::c_void,
    pub stype: ::std::os::raw::c_int,
    pub itype: ::std::os::raw::c_int,
    pub xtype: ::std::os::raw::c_int,
    pub dtype: ::std::os::raw::c_int,
    pub sorted: ::std::os::raw::c_int,
    pub packed: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cholmod_sparse_struct() {
    assert_eq!(
        ::std::mem::size_of::<cholmod_sparse_struct>(),
        88usize,
        concat!("Size of: ", stringify!(cholmod_sparse_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cholmod_sparse_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cholmod_sparse_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).nrow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(nrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).ncol as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(ncol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).nzmax as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(nzmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).p as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).i as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).nz as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(nz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).x as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).z as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).stype as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).itype as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(itype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).xtype as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(xtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).dtype as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(dtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).sorted as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(sorted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_sparse_struct>())).packed as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_sparse_struct),
            "::",
            stringify!(packed)
        )
    );
}
pub type cholmod_sparse = cholmod_sparse_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cholmod_descendant_score_t {
    pub score: f64,
    pub d: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_cholmod_descendant_score_t() {
    assert_eq!(
        ::std::mem::size_of::<cholmod_descendant_score_t>(),
        16usize,
        concat!("Size of: ", stringify!(cholmod_descendant_score_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cholmod_descendant_score_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cholmod_descendant_score_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_descendant_score_t>())).score as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_descendant_score_t),
            "::",
            stringify!(score)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_descendant_score_t>())).d as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_descendant_score_t),
            "::",
            stringify!(d)
        )
    );
}
pub type descendantScore = cholmod_descendant_score_t;
extern "C" {
    pub fn cholmod_score_comp(
        i: *mut cholmod_descendant_score_t,
        j: *mut cholmod_descendant_score_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_score_comp(
        i: *mut cholmod_descendant_score_t,
        j: *mut cholmod_descendant_score_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_allocate_sparse(
        nrow: size_t,
        ncol: size_t,
        nzmax: size_t,
        sorted: ::std::os::raw::c_int,
        packed: ::std::os::raw::c_int,
        stype: ::std::os::raw::c_int,
        xtype: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_allocate_sparse(
        arg1: size_t,
        arg2: size_t,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_free_sparse(
        A: *mut *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_free_sparse(
        arg1: *mut *mut cholmod_sparse,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_reallocate_sparse(
        nznew: size_t,
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_reallocate_sparse(
        arg1: size_t,
        arg2: *mut cholmod_sparse,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_nnz(
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_l_nnz(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_speye(
        nrow: size_t,
        ncol: size_t,
        xtype: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_speye(
        arg1: size_t,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_spzeros(
        nrow: size_t,
        ncol: size_t,
        nzmax: size_t,
        xtype: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_spzeros(
        arg1: size_t,
        arg2: size_t,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_transpose(
        A: *mut cholmod_sparse,
        values: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_transpose(
        arg1: *mut cholmod_sparse,
        arg2: ::std::os::raw::c_int,
        arg3: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_transpose_unsym(
        A: *mut cholmod_sparse,
        values: ::std::os::raw::c_int,
        Perm: *mut ::std::os::raw::c_int,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        F: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_transpose_unsym(
        arg1: *mut cholmod_sparse,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: size_t,
        arg6: *mut cholmod_sparse,
        arg7: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_transpose_sym(
        A: *mut cholmod_sparse,
        values: ::std::os::raw::c_int,
        Perm: *mut ::std::os::raw::c_int,
        F: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_transpose_sym(
        arg1: *mut cholmod_sparse,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut cholmod_sparse,
        arg5: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_ptranspose(
        A: *mut cholmod_sparse,
        values: ::std::os::raw::c_int,
        Perm: *mut ::std::os::raw::c_int,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_ptranspose(
        arg1: *mut cholmod_sparse,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: size_t,
        arg6: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_sort(
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_sort(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_band(
        A: *mut cholmod_sparse,
        k1: ::std::os::raw::c_long,
        k2: ::std::os::raw::c_long,
        mode: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_band(
        arg1: *mut cholmod_sparse,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_int,
        arg5: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_band_inplace(
        k1: ::std::os::raw::c_long,
        k2: ::std::os::raw::c_long,
        mode: ::std::os::raw::c_int,
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_band_inplace(
        arg1: ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cholmod_sparse,
        arg5: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_aat(
        A: *mut cholmod_sparse,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        mode: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_aat(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_copy_sparse(
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_copy_sparse(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_copy(
        A: *mut cholmod_sparse,
        stype: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_copy(
        arg1: *mut cholmod_sparse,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_add(
        A: *mut cholmod_sparse,
        B: *mut cholmod_sparse,
        alpha: *mut f64,
        beta: *mut f64,
        values: ::std::os::raw::c_int,
        sorted: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_add(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_sparse,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_sparse_xtype(
        to_xtype: ::std::os::raw::c_int,
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_sparse_xtype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_sparse,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cholmod_factor_struct {
    pub n: size_t,
    pub minor: size_t,
    pub Perm: *mut ::std::os::raw::c_void,
    pub ColCount: *mut ::std::os::raw::c_void,
    pub IPerm: *mut ::std::os::raw::c_void,
    pub nzmax: size_t,
    pub p: *mut ::std::os::raw::c_void,
    pub i: *mut ::std::os::raw::c_void,
    pub x: *mut ::std::os::raw::c_void,
    pub z: *mut ::std::os::raw::c_void,
    pub nz: *mut ::std::os::raw::c_void,
    pub next: *mut ::std::os::raw::c_void,
    pub prev: *mut ::std::os::raw::c_void,
    pub nsuper: size_t,
    pub ssize: size_t,
    pub xsize: size_t,
    pub maxcsize: size_t,
    pub maxesize: size_t,
    pub super_: *mut ::std::os::raw::c_void,
    pub pi: *mut ::std::os::raw::c_void,
    pub px: *mut ::std::os::raw::c_void,
    pub s: *mut ::std::os::raw::c_void,
    pub ordering: ::std::os::raw::c_int,
    pub is_ll: ::std::os::raw::c_int,
    pub is_super: ::std::os::raw::c_int,
    pub is_monotonic: ::std::os::raw::c_int,
    pub itype: ::std::os::raw::c_int,
    pub xtype: ::std::os::raw::c_int,
    pub dtype: ::std::os::raw::c_int,
    pub useGPU: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cholmod_factor_struct() {
    assert_eq!(
        ::std::mem::size_of::<cholmod_factor_struct>(),
        208usize,
        concat!("Size of: ", stringify!(cholmod_factor_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cholmod_factor_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cholmod_factor_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).minor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).Perm as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(Perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).ColCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(ColCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).IPerm as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(IPerm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).nzmax as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(nzmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).p as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).i as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).x as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).z as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).nz as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(nz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).next as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).prev as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).nsuper as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(nsuper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).ssize as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(ssize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).xsize as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(xsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).maxcsize as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(maxcsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).maxesize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(maxesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).super_ as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(super_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).pi as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(pi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).px as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(px)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).s as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).ordering as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(ordering)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).is_ll as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(is_ll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).is_super as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(is_super)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cholmod_factor_struct>())).is_monotonic as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(is_monotonic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).itype as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(itype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).xtype as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(xtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).dtype as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(dtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_factor_struct>())).useGPU as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_factor_struct),
            "::",
            stringify!(useGPU)
        )
    );
}
pub type cholmod_factor = cholmod_factor_struct;
extern "C" {
    pub fn cholmod_allocate_factor(n: size_t, Common: *mut cholmod_common) -> *mut cholmod_factor;
}
extern "C" {
    pub fn cholmod_l_allocate_factor(
        arg1: size_t,
        arg2: *mut cholmod_common,
    ) -> *mut cholmod_factor;
}
extern "C" {
    pub fn cholmod_free_factor(
        L: *mut *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_free_factor(
        arg1: *mut *mut cholmod_factor,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_reallocate_factor(
        nznew: size_t,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_reallocate_factor(
        arg1: size_t,
        arg2: *mut cholmod_factor,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_change_factor(
        to_xtype: ::std::os::raw::c_int,
        to_ll: ::std::os::raw::c_int,
        to_super: ::std::os::raw::c_int,
        to_packed: ::std::os::raw::c_int,
        to_monotonic: ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_change_factor(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut cholmod_factor,
        arg7: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_pack_factor(
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_pack_factor(
        arg1: *mut cholmod_factor,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_reallocate_column(
        j: size_t,
        need: size_t,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_reallocate_column(
        arg1: size_t,
        arg2: size_t,
        arg3: *mut cholmod_factor,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_factor_to_sparse(
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_factor_to_sparse(
        arg1: *mut cholmod_factor,
        arg2: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_copy_factor(
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_factor;
}
extern "C" {
    pub fn cholmod_l_copy_factor(
        arg1: *mut cholmod_factor,
        arg2: *mut cholmod_common,
    ) -> *mut cholmod_factor;
}
extern "C" {
    pub fn cholmod_factor_xtype(
        to_xtype: ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_factor_xtype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_factor,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cholmod_dense_struct {
    pub nrow: size_t,
    pub ncol: size_t,
    pub nzmax: size_t,
    pub d: size_t,
    pub x: *mut ::std::os::raw::c_void,
    pub z: *mut ::std::os::raw::c_void,
    pub xtype: ::std::os::raw::c_int,
    pub dtype: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cholmod_dense_struct() {
    assert_eq!(
        ::std::mem::size_of::<cholmod_dense_struct>(),
        56usize,
        concat!("Size of: ", stringify!(cholmod_dense_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cholmod_dense_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cholmod_dense_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_dense_struct>())).nrow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_dense_struct),
            "::",
            stringify!(nrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_dense_struct>())).ncol as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_dense_struct),
            "::",
            stringify!(ncol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_dense_struct>())).nzmax as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_dense_struct),
            "::",
            stringify!(nzmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_dense_struct>())).d as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_dense_struct),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_dense_struct>())).x as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_dense_struct),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_dense_struct>())).z as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_dense_struct),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_dense_struct>())).xtype as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_dense_struct),
            "::",
            stringify!(xtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_dense_struct>())).dtype as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_dense_struct),
            "::",
            stringify!(dtype)
        )
    );
}
pub type cholmod_dense = cholmod_dense_struct;
extern "C" {
    pub fn cholmod_allocate_dense(
        nrow: size_t,
        ncol: size_t,
        d: size_t,
        xtype: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_l_allocate_dense(
        arg1: size_t,
        arg2: size_t,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_zeros(
        nrow: size_t,
        ncol: size_t,
        xtype: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_l_zeros(
        arg1: size_t,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_ones(
        nrow: size_t,
        ncol: size_t,
        xtype: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_l_ones(
        arg1: size_t,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_eye(
        nrow: size_t,
        ncol: size_t,
        xtype: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_l_eye(
        arg1: size_t,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_free_dense(
        X: *mut *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_free_dense(
        arg1: *mut *mut cholmod_dense,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_ensure_dense(
        XHandle: *mut *mut cholmod_dense,
        nrow: size_t,
        ncol: size_t,
        d: size_t,
        xtype: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_l_ensure_dense(
        arg1: *mut *mut cholmod_dense,
        arg2: size_t,
        arg3: size_t,
        arg4: size_t,
        arg5: ::std::os::raw::c_int,
        arg6: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_sparse_to_dense(
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_l_sparse_to_dense(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_dense_to_sparse(
        X: *mut cholmod_dense,
        values: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_dense_to_sparse(
        arg1: *mut cholmod_dense,
        arg2: ::std::os::raw::c_int,
        arg3: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_copy_dense(
        X: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_l_copy_dense(
        arg1: *mut cholmod_dense,
        arg2: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_copy_dense2(
        X: *mut cholmod_dense,
        Y: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_copy_dense2(
        arg1: *mut cholmod_dense,
        arg2: *mut cholmod_dense,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_dense_xtype(
        to_xtype: ::std::os::raw::c_int,
        X: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_dense_xtype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_dense,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cholmod_triplet_struct {
    pub nrow: size_t,
    pub ncol: size_t,
    pub nzmax: size_t,
    pub nnz: size_t,
    pub i: *mut ::std::os::raw::c_void,
    pub j: *mut ::std::os::raw::c_void,
    pub x: *mut ::std::os::raw::c_void,
    pub z: *mut ::std::os::raw::c_void,
    pub stype: ::std::os::raw::c_int,
    pub itype: ::std::os::raw::c_int,
    pub xtype: ::std::os::raw::c_int,
    pub dtype: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cholmod_triplet_struct() {
    assert_eq!(
        ::std::mem::size_of::<cholmod_triplet_struct>(),
        80usize,
        concat!("Size of: ", stringify!(cholmod_triplet_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cholmod_triplet_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cholmod_triplet_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).nrow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(nrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).ncol as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(ncol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).nzmax as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(nzmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).nnz as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(nnz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).i as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).j as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(j)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).x as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).z as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).stype as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).itype as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(itype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).xtype as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(xtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cholmod_triplet_struct>())).dtype as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(cholmod_triplet_struct),
            "::",
            stringify!(dtype)
        )
    );
}
pub type cholmod_triplet = cholmod_triplet_struct;
extern "C" {
    pub fn cholmod_allocate_triplet(
        nrow: size_t,
        ncol: size_t,
        nzmax: size_t,
        stype: ::std::os::raw::c_int,
        xtype: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_triplet;
}
extern "C" {
    pub fn cholmod_l_allocate_triplet(
        arg1: size_t,
        arg2: size_t,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut cholmod_common,
    ) -> *mut cholmod_triplet;
}
extern "C" {
    pub fn cholmod_free_triplet(
        T: *mut *mut cholmod_triplet,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_free_triplet(
        arg1: *mut *mut cholmod_triplet,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_reallocate_triplet(
        nznew: size_t,
        T: *mut cholmod_triplet,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_reallocate_triplet(
        arg1: size_t,
        arg2: *mut cholmod_triplet,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_sparse_to_triplet(
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_triplet;
}
extern "C" {
    pub fn cholmod_l_sparse_to_triplet(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_common,
    ) -> *mut cholmod_triplet;
}
extern "C" {
    pub fn cholmod_triplet_to_sparse(
        T: *mut cholmod_triplet,
        nzmax: size_t,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_triplet_to_sparse(
        arg1: *mut cholmod_triplet,
        arg2: size_t,
        arg3: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_copy_triplet(
        T: *mut cholmod_triplet,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_triplet;
}
extern "C" {
    pub fn cholmod_l_copy_triplet(
        arg1: *mut cholmod_triplet,
        arg2: *mut cholmod_common,
    ) -> *mut cholmod_triplet;
}
extern "C" {
    pub fn cholmod_triplet_xtype(
        to_xtype: ::std::os::raw::c_int,
        T: *mut cholmod_triplet,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_triplet_xtype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_triplet,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_malloc(
        n: size_t,
        size: size_t,
        Common: *mut cholmod_common,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cholmod_l_malloc(
        arg1: size_t,
        arg2: size_t,
        arg3: *mut cholmod_common,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cholmod_calloc(
        n: size_t,
        size: size_t,
        Common: *mut cholmod_common,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cholmod_l_calloc(
        arg1: size_t,
        arg2: size_t,
        arg3: *mut cholmod_common,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cholmod_free(
        n: size_t,
        size: size_t,
        p: *mut ::std::os::raw::c_void,
        Common: *mut cholmod_common,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cholmod_l_free(
        arg1: size_t,
        arg2: size_t,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut cholmod_common,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cholmod_realloc(
        nnew: size_t,
        size: size_t,
        p: *mut ::std::os::raw::c_void,
        n: *mut size_t,
        Common: *mut cholmod_common,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cholmod_l_realloc(
        arg1: size_t,
        arg2: size_t,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut size_t,
        arg5: *mut cholmod_common,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cholmod_realloc_multiple(
        nnew: size_t,
        nint: ::std::os::raw::c_int,
        xtype: ::std::os::raw::c_int,
        Iblock: *mut *mut ::std::os::raw::c_void,
        Jblock: *mut *mut ::std::os::raw::c_void,
        Xblock: *mut *mut ::std::os::raw::c_void,
        Zblock: *mut *mut ::std::os::raw::c_void,
        n: *mut size_t,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_realloc_multiple(
        arg1: size_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_void,
        arg5: *mut *mut ::std::os::raw::c_void,
        arg6: *mut *mut ::std::os::raw::c_void,
        arg7: *mut *mut ::std::os::raw::c_void,
        arg8: *mut size_t,
        arg9: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_version(version: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_version(version: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos64_t;
pub type fpos64_t = __fpos64_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}tmpfile64"]
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}fopen64"]
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}freopen64"]
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}fseeko64"]
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}ftello64"]
    pub fn ftello(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    #[link_name = "\u{1}fgetpos64"]
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}fsetpos64"]
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_check_common(Common: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_check_common(arg1: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_print_common(
        name: *const ::std::os::raw::c_char,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_print_common(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_gpu_stats(arg1: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_gpu_stats(arg1: *mut cholmod_common) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_check_sparse(
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_check_sparse(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_print_sparse(
        A: *mut cholmod_sparse,
        name: *const ::std::os::raw::c_char,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_print_sparse(
        arg1: *mut cholmod_sparse,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_check_dense(
        X: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_check_dense(
        arg1: *mut cholmod_dense,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_print_dense(
        X: *mut cholmod_dense,
        name: *const ::std::os::raw::c_char,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_print_dense(
        arg1: *mut cholmod_dense,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_check_factor(
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_check_factor(
        arg1: *mut cholmod_factor,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_print_factor(
        L: *mut cholmod_factor,
        name: *const ::std::os::raw::c_char,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_print_factor(
        arg1: *mut cholmod_factor,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_check_triplet(
        T: *mut cholmod_triplet,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_check_triplet(
        arg1: *mut cholmod_triplet,
        arg2: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_print_triplet(
        T: *mut cholmod_triplet,
        name: *const ::std::os::raw::c_char,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_print_triplet(
        arg1: *mut cholmod_triplet,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_check_subset(
        Set: *mut ::std::os::raw::c_int,
        len: ::std::os::raw::c_long,
        n: size_t,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_check_subset(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
        arg3: size_t,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_print_subset(
        Set: *mut ::std::os::raw::c_int,
        len: ::std::os::raw::c_long,
        n: size_t,
        name: *const ::std::os::raw::c_char,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_print_subset(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_check_perm(
        Perm: *mut ::std::os::raw::c_int,
        len: size_t,
        n: size_t,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_check_perm(
        arg1: *mut ::std::os::raw::c_long,
        arg2: size_t,
        arg3: size_t,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_print_perm(
        Perm: *mut ::std::os::raw::c_int,
        len: size_t,
        n: size_t,
        name: *const ::std::os::raw::c_char,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_print_perm(
        arg1: *mut ::std::os::raw::c_long,
        arg2: size_t,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_check_parent(
        Parent: *mut ::std::os::raw::c_int,
        n: size_t,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_check_parent(
        arg1: *mut ::std::os::raw::c_long,
        arg2: size_t,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_print_parent(
        Parent: *mut ::std::os::raw::c_int,
        n: size_t,
        name: *const ::std::os::raw::c_char,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_print_parent(
        arg1: *mut ::std::os::raw::c_long,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_read_sparse(f: *mut FILE, Common: *mut cholmod_common) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_read_sparse(arg1: *mut FILE, arg2: *mut cholmod_common)
        -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_read_triplet(f: *mut FILE, Common: *mut cholmod_common) -> *mut cholmod_triplet;
}
extern "C" {
    pub fn cholmod_l_read_triplet(
        arg1: *mut FILE,
        arg2: *mut cholmod_common,
    ) -> *mut cholmod_triplet;
}
extern "C" {
    pub fn cholmod_read_dense(f: *mut FILE, Common: *mut cholmod_common) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_l_read_dense(arg1: *mut FILE, arg2: *mut cholmod_common) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_read_matrix(
        f: *mut FILE,
        prefer: ::std::os::raw::c_int,
        mtype: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cholmod_l_read_matrix(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut cholmod_common,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cholmod_write_sparse(
        f: *mut FILE,
        A: *mut cholmod_sparse,
        Z: *mut cholmod_sparse,
        comments: *const ::std::os::raw::c_char,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_write_sparse(
        arg1: *mut FILE,
        arg2: *mut cholmod_sparse,
        arg3: *mut cholmod_sparse,
        c: *const ::std::os::raw::c_char,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_write_dense(
        f: *mut FILE,
        X: *mut cholmod_dense,
        comments: *const ::std::os::raw::c_char,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_write_dense(
        arg1: *mut FILE,
        arg2: *mut cholmod_dense,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_ccolamd(
        A: *mut cholmod_sparse,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        Cmember: *mut ::std::os::raw::c_int,
        Perm: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_ccolamd(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_csymamd(
        A: *mut cholmod_sparse,
        Cmember: *mut ::std::os::raw::c_int,
        Perm: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_csymamd(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_camd(
        A: *mut cholmod_sparse,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        Cmember: *mut ::std::os::raw::c_int,
        Perm: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_camd(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_nested_dissection(
        A: *mut cholmod_sparse,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        Perm: *mut ::std::os::raw::c_int,
        CParent: *mut ::std::os::raw::c_int,
        Cmember: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_l_nested_dissection(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut ::std::os::raw::c_long,
        arg7: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_metis(
        A: *mut cholmod_sparse,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        postorder: ::std::os::raw::c_int,
        Perm: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_metis(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_bisect(
        A: *mut cholmod_sparse,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        compress: ::std::os::raw::c_int,
        Partition: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_l_bisect(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_metis_bisector(
        A: *mut cholmod_sparse,
        Anw: *mut ::std::os::raw::c_int,
        Aew: *mut ::std::os::raw::c_int,
        Partition: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_l_metis_bisector(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_collapse_septree(
        n: size_t,
        ncomponents: size_t,
        nd_oksep: f64,
        nd_small: size_t,
        CParent: *mut ::std::os::raw::c_int,
        Cmember: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_l_collapse_septree(
        arg1: size_t,
        arg2: size_t,
        arg3: f64,
        arg4: size_t,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut ::std::os::raw::c_long,
        arg7: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_super_symbolic(
        A: *mut cholmod_sparse,
        F: *mut cholmod_sparse,
        Parent: *mut ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_super_symbolic(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_sparse,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut cholmod_factor,
        arg5: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_super_symbolic2(
        for_whom: ::std::os::raw::c_int,
        A: *mut cholmod_sparse,
        F: *mut cholmod_sparse,
        Parent: *mut ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_super_symbolic2(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_sparse,
        arg3: *mut cholmod_sparse,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut cholmod_factor,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_super_numeric(
        A: *mut cholmod_sparse,
        F: *mut cholmod_sparse,
        beta: *mut f64,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_super_numeric(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_sparse,
        arg3: *mut f64,
        arg4: *mut cholmod_factor,
        arg5: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_super_lsolve(
        L: *mut cholmod_factor,
        X: *mut cholmod_dense,
        E: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_super_lsolve(
        arg1: *mut cholmod_factor,
        arg2: *mut cholmod_dense,
        arg3: *mut cholmod_dense,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_super_ltsolve(
        L: *mut cholmod_factor,
        X: *mut cholmod_dense,
        E: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_super_ltsolve(
        arg1: *mut cholmod_factor,
        arg2: *mut cholmod_dense,
        arg3: *mut cholmod_dense,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_analyze(
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_factor;
}
extern "C" {
    pub fn cholmod_l_analyze(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_common,
    ) -> *mut cholmod_factor;
}
extern "C" {
    pub fn cholmod_analyze_p(
        A: *mut cholmod_sparse,
        UserPerm: *mut ::std::os::raw::c_int,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_factor;
}
extern "C" {
    pub fn cholmod_l_analyze_p(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: size_t,
        arg5: *mut cholmod_common,
    ) -> *mut cholmod_factor;
}
extern "C" {
    pub fn cholmod_analyze_p2(
        for_whom: ::std::os::raw::c_int,
        A: *mut cholmod_sparse,
        UserPerm: *mut ::std::os::raw::c_int,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_factor;
}
extern "C" {
    pub fn cholmod_l_analyze_p2(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_sparse,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: size_t,
        arg6: *mut cholmod_common,
    ) -> *mut cholmod_factor;
}
extern "C" {
    pub fn cholmod_factorize(
        A: *mut cholmod_sparse,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_factorize(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_factor,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_factorize_p(
        A: *mut cholmod_sparse,
        beta: *mut f64,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_factorize_p(
        arg1: *mut cholmod_sparse,
        arg2: *mut f64,
        arg3: *mut ::std::os::raw::c_long,
        arg4: size_t,
        arg5: *mut cholmod_factor,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_solve(
        sys: ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        B: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_l_solve(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_factor,
        arg3: *mut cholmod_dense,
        arg4: *mut cholmod_common,
    ) -> *mut cholmod_dense;
}
extern "C" {
    pub fn cholmod_solve2(
        sys: ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        B: *mut cholmod_dense,
        Bset: *mut cholmod_sparse,
        X_Handle: *mut *mut cholmod_dense,
        Xset_Handle: *mut *mut cholmod_sparse,
        Y_Handle: *mut *mut cholmod_dense,
        E_Handle: *mut *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_solve2(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_factor,
        arg3: *mut cholmod_dense,
        arg4: *mut cholmod_sparse,
        arg5: *mut *mut cholmod_dense,
        arg6: *mut *mut cholmod_sparse,
        arg7: *mut *mut cholmod_dense,
        arg8: *mut *mut cholmod_dense,
        arg9: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_spsolve(
        sys: ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        B: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_spsolve(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_factor,
        arg3: *mut cholmod_sparse,
        arg4: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_etree(
        A: *mut cholmod_sparse,
        Parent: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_etree(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_rowcolcounts(
        A: *mut cholmod_sparse,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        Parent: *mut ::std::os::raw::c_int,
        Post: *mut ::std::os::raw::c_int,
        RowCount: *mut ::std::os::raw::c_int,
        ColCount: *mut ::std::os::raw::c_int,
        First: *mut ::std::os::raw::c_int,
        Level: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_rowcolcounts(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut ::std::os::raw::c_long,
        arg7: *mut ::std::os::raw::c_long,
        arg8: *mut ::std::os::raw::c_long,
        arg9: *mut ::std::os::raw::c_long,
        arg10: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_analyze_ordering(
        A: *mut cholmod_sparse,
        ordering: ::std::os::raw::c_int,
        Perm: *mut ::std::os::raw::c_int,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        Parent: *mut ::std::os::raw::c_int,
        Post: *mut ::std::os::raw::c_int,
        ColCount: *mut ::std::os::raw::c_int,
        First: *mut ::std::os::raw::c_int,
        Level: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_analyze_ordering(
        arg1: *mut cholmod_sparse,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: size_t,
        arg6: *mut ::std::os::raw::c_long,
        arg7: *mut ::std::os::raw::c_long,
        arg8: *mut ::std::os::raw::c_long,
        arg9: *mut ::std::os::raw::c_long,
        arg10: *mut ::std::os::raw::c_long,
        arg11: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_amd(
        A: *mut cholmod_sparse,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        Perm: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_amd(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_colamd(
        A: *mut cholmod_sparse,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        postorder: ::std::os::raw::c_int,
        Perm: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_colamd(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_rowfac(
        A: *mut cholmod_sparse,
        F: *mut cholmod_sparse,
        beta: *mut f64,
        kstart: size_t,
        kend: size_t,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_rowfac(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_sparse,
        arg3: *mut f64,
        arg4: size_t,
        arg5: size_t,
        arg6: *mut cholmod_factor,
        arg7: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_rowfac_mask(
        A: *mut cholmod_sparse,
        F: *mut cholmod_sparse,
        beta: *mut f64,
        kstart: size_t,
        kend: size_t,
        mask: *mut ::std::os::raw::c_int,
        RLinkUp: *mut ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_rowfac_mask(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_sparse,
        arg3: *mut f64,
        arg4: size_t,
        arg5: size_t,
        arg6: *mut ::std::os::raw::c_long,
        arg7: *mut ::std::os::raw::c_long,
        arg8: *mut cholmod_factor,
        arg9: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_rowfac_mask2(
        A: *mut cholmod_sparse,
        F: *mut cholmod_sparse,
        beta: *mut f64,
        kstart: size_t,
        kend: size_t,
        mask: *mut ::std::os::raw::c_int,
        maskmark: ::std::os::raw::c_int,
        RLinkUp: *mut ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_rowfac_mask2(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_sparse,
        arg3: *mut f64,
        arg4: size_t,
        arg5: size_t,
        arg6: *mut ::std::os::raw::c_long,
        arg7: ::std::os::raw::c_long,
        arg8: *mut ::std::os::raw::c_long,
        arg9: *mut cholmod_factor,
        arg10: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_row_subtree(
        A: *mut cholmod_sparse,
        F: *mut cholmod_sparse,
        k: size_t,
        Parent: *mut ::std::os::raw::c_int,
        R: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_row_subtree(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_sparse,
        arg3: size_t,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut cholmod_sparse,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_lsolve_pattern(
        B: *mut cholmod_sparse,
        L: *mut cholmod_factor,
        X: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_lsolve_pattern(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_factor,
        arg3: *mut cholmod_sparse,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_row_lsubtree(
        A: *mut cholmod_sparse,
        Fi: *mut ::std::os::raw::c_int,
        fnz: size_t,
        k: size_t,
        L: *mut cholmod_factor,
        R: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_row_lsubtree(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: size_t,
        arg5: *mut cholmod_factor,
        arg6: *mut cholmod_sparse,
        arg7: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_resymbol(
        A: *mut cholmod_sparse,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        pack: ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_resymbol(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: *mut cholmod_factor,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_resymbol_noperm(
        A: *mut cholmod_sparse,
        fset: *mut ::std::os::raw::c_int,
        fsize: size_t,
        pack: ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_resymbol_noperm(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: *mut cholmod_factor,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_rcond(L: *mut cholmod_factor, Common: *mut cholmod_common) -> f64;
}
extern "C" {
    pub fn cholmod_l_rcond(arg1: *mut cholmod_factor, arg2: *mut cholmod_common) -> f64;
}
extern "C" {
    pub fn cholmod_postorder(
        Parent: *mut ::std::os::raw::c_int,
        n: size_t,
        Weight_p: *mut ::std::os::raw::c_int,
        Post: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_l_postorder(
        arg1: *mut ::std::os::raw::c_long,
        arg2: size_t,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut cholmod_common,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cholmod_drop(
        tol: f64,
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_drop(
        arg1: f64,
        arg2: *mut cholmod_sparse,
        arg3: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_norm_dense(
        X: *mut cholmod_dense,
        norm: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> f64;
}
extern "C" {
    pub fn cholmod_l_norm_dense(
        arg1: *mut cholmod_dense,
        arg2: ::std::os::raw::c_int,
        arg3: *mut cholmod_common,
    ) -> f64;
}
extern "C" {
    pub fn cholmod_norm_sparse(
        A: *mut cholmod_sparse,
        norm: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> f64;
}
extern "C" {
    pub fn cholmod_l_norm_sparse(
        arg1: *mut cholmod_sparse,
        arg2: ::std::os::raw::c_int,
        arg3: *mut cholmod_common,
    ) -> f64;
}
extern "C" {
    pub fn cholmod_horzcat(
        A: *mut cholmod_sparse,
        B: *mut cholmod_sparse,
        values: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_horzcat(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_sparse,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_scale(
        S: *mut cholmod_dense,
        scale: ::std::os::raw::c_int,
        A: *mut cholmod_sparse,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_scale(
        arg1: *mut cholmod_dense,
        arg2: ::std::os::raw::c_int,
        arg3: *mut cholmod_sparse,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_sdmult(
        A: *mut cholmod_sparse,
        transpose: ::std::os::raw::c_int,
        alpha: *mut f64,
        beta: *mut f64,
        X: *mut cholmod_dense,
        Y: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_sdmult(
        arg1: *mut cholmod_sparse,
        arg2: ::std::os::raw::c_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut cholmod_dense,
        Y: *mut cholmod_dense,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_ssmult(
        A: *mut cholmod_sparse,
        B: *mut cholmod_sparse,
        stype: ::std::os::raw::c_int,
        values: ::std::os::raw::c_int,
        sorted: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_ssmult(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_sparse,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_submatrix(
        A: *mut cholmod_sparse,
        rset: *mut ::std::os::raw::c_int,
        rsize: ::std::os::raw::c_long,
        cset: *mut ::std::os::raw::c_int,
        csize: ::std::os::raw::c_long,
        values: ::std::os::raw::c_int,
        sorted: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_submatrix(
        arg1: *mut cholmod_sparse,
        arg2: *mut ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_vertcat(
        A: *mut cholmod_sparse,
        B: *mut cholmod_sparse,
        values: ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_l_vertcat(
        arg1: *mut cholmod_sparse,
        arg2: *mut cholmod_sparse,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cholmod_common,
    ) -> *mut cholmod_sparse;
}
extern "C" {
    pub fn cholmod_symmetry(
        A: *mut cholmod_sparse,
        option: ::std::os::raw::c_int,
        xmatched: *mut ::std::os::raw::c_int,
        pmatched: *mut ::std::os::raw::c_int,
        nzoffdiag: *mut ::std::os::raw::c_int,
        nzdiag: *mut ::std::os::raw::c_int,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_symmetry(
        arg1: *mut cholmod_sparse,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut ::std::os::raw::c_long,
        arg7: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_updown(
        update: ::std::os::raw::c_int,
        C: *mut cholmod_sparse,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_updown(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_sparse,
        arg3: *mut cholmod_factor,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_updown_solve(
        update: ::std::os::raw::c_int,
        C: *mut cholmod_sparse,
        L: *mut cholmod_factor,
        X: *mut cholmod_dense,
        DeltaB: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_updown_solve(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_sparse,
        arg3: *mut cholmod_factor,
        arg4: *mut cholmod_dense,
        arg5: *mut cholmod_dense,
        arg6: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_updown_mark(
        update: ::std::os::raw::c_int,
        C: *mut cholmod_sparse,
        colmark: *mut ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        X: *mut cholmod_dense,
        DeltaB: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_updown_mark(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_sparse,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut cholmod_factor,
        arg5: *mut cholmod_dense,
        arg6: *mut cholmod_dense,
        arg7: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_updown_mask(
        update: ::std::os::raw::c_int,
        C: *mut cholmod_sparse,
        colmark: *mut ::std::os::raw::c_int,
        mask: *mut ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        X: *mut cholmod_dense,
        DeltaB: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_updown_mask(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_sparse,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut cholmod_factor,
        arg6: *mut cholmod_dense,
        arg7: *mut cholmod_dense,
        arg8: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_updown_mask2(
        update: ::std::os::raw::c_int,
        C: *mut cholmod_sparse,
        colmark: *mut ::std::os::raw::c_int,
        mask: *mut ::std::os::raw::c_int,
        maskmark: ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        X: *mut cholmod_dense,
        DeltaB: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_updown_mask2(
        arg1: ::std::os::raw::c_int,
        arg2: *mut cholmod_sparse,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: *mut cholmod_factor,
        arg7: *mut cholmod_dense,
        arg8: *mut cholmod_dense,
        arg9: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_rowadd(
        k: size_t,
        R: *mut cholmod_sparse,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_rowadd(
        arg1: size_t,
        arg2: *mut cholmod_sparse,
        arg3: *mut cholmod_factor,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_rowadd_solve(
        k: size_t,
        R: *mut cholmod_sparse,
        bk: *mut f64,
        L: *mut cholmod_factor,
        X: *mut cholmod_dense,
        DeltaB: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_rowadd_solve(
        arg1: size_t,
        arg2: *mut cholmod_sparse,
        arg3: *mut f64,
        arg4: *mut cholmod_factor,
        arg5: *mut cholmod_dense,
        arg6: *mut cholmod_dense,
        arg7: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_rowadd_mark(
        k: size_t,
        R: *mut cholmod_sparse,
        bk: *mut f64,
        colmark: *mut ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        X: *mut cholmod_dense,
        DeltaB: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_rowadd_mark(
        arg1: size_t,
        arg2: *mut cholmod_sparse,
        arg3: *mut f64,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut cholmod_factor,
        arg6: *mut cholmod_dense,
        arg7: *mut cholmod_dense,
        arg8: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_rowdel(
        k: size_t,
        R: *mut cholmod_sparse,
        L: *mut cholmod_factor,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_rowdel(
        arg1: size_t,
        arg2: *mut cholmod_sparse,
        arg3: *mut cholmod_factor,
        arg4: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_rowdel_solve(
        k: size_t,
        R: *mut cholmod_sparse,
        yk: *mut f64,
        L: *mut cholmod_factor,
        X: *mut cholmod_dense,
        DeltaB: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_rowdel_solve(
        arg1: size_t,
        arg2: *mut cholmod_sparse,
        arg3: *mut f64,
        arg4: *mut cholmod_factor,
        arg5: *mut cholmod_dense,
        arg6: *mut cholmod_dense,
        arg7: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_rowdel_mark(
        k: size_t,
        R: *mut cholmod_sparse,
        yk: *mut f64,
        colmark: *mut ::std::os::raw::c_int,
        L: *mut cholmod_factor,
        X: *mut cholmod_dense,
        DeltaB: *mut cholmod_dense,
        Common: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cholmod_l_rowdel_mark(
        arg1: size_t,
        arg2: *mut cholmod_sparse,
        arg3: *mut f64,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut cholmod_factor,
        arg6: *mut cholmod_dense,
        arg7: *mut cholmod_dense,
        arg8: *mut cholmod_common,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
